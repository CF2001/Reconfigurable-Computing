#include <stdlib.h>
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "fsl.h"
#include "xtmrctr_l.h"
#include "xil_printf.h"

#include "stdbool.h"

#define min(a, b)	((a < b) ? a : b)

#define N	10

int countSetBits(unsigned int n)
{
	int nSetBits = 0;

	while(n != 0)
	{
		nSetBits += n & 1; // check if bit is 0 or 1
		n = n >> 1; // discard the last bit
	}

	return nSetBits;
}

int correctionError(int c, int msg)
{
	//     msg - m14 m13 m12 m11 m10 m9 m8 m7 m6 m5 m4 m3 m2 m1 m0
	int validMsg;
	switch(c)
	{
	    case 3:
	    	validMsg = msg ^ 0b000000000000001;	// correct bit m0
	    	break;
	    case 5:
			validMsg = msg ^ 0b000000000000010;	// correct bit m1
			break;
	    case 6:
			validMsg = msg ^ 0b000000000000100;	// correct bit m2
			break;
	    case 7:
			validMsg = msg ^ 0b000000000001000;	// correct bit m3
			break;
	    case 9:
			validMsg = msg ^ 0b000000000010000;	// correct bit m4
			break;
	    case 10:
			validMsg = msg ^ 0b000000000100000;	// correct bit m5
			break;
	    case 11:
			validMsg = msg ^ 0b000000001000000;	// correct bit m6
			break;
	    case 12:
			validMsg = msg ^ 0b000000010000000;	// correct bit m7
			break;
	    case 13:
	    	validMsg = msg ^ 0b000000100000000;	// correct bit m8
	    	break;
	    case 14:
	    	validMsg = msg ^ 0b000001000000000;	// correct bit m9
			break;
	    case 15:
	    	validMsg = msg ^ 0b000010000000000;	// correct bit m10
	    	break;
	    case 17:
			validMsg = msg ^ 0b000100000000000;	// correct bit m11
			break;
	    case 18:
			validMsg = msg ^ 0b001000000000000;	// correct bit m12
			break;
	    case 19:
			validMsg = msg ^ 0b010000000000000;	// correct bit m13
			break;
	    case 20:
			validMsg = msg ^ 0b100000000000000;	// correct bit m14
			break;
	    default:
	    	break;
	}

	return validMsg;
}

/************************** Encoder Hamming Code ****************************/

// positions: 19  18  17  16  15 14  13 12 11 10 9  8  7  6  5  4  3  2  1  0
// codeWord: m14 m13 m12 m11 p15 m10 m9 m8 m7 m6 m5 m4 p7 m3 m2 m1 p3 m0 p1 p0

/**
 * 	@param pDst  20-bit encoded messages
 * 	@param pSrc  15-bit original messages
 * 	@size
 */
void EncoderHammingCodeSW(int* pDst, int* pSrc, unsigned int size)
{
	int* p;
	int p15, p7, p3, p1, p0;

	for (p = pSrc; p < pSrc + size; p++, pDst++)
	{
		// reset
		*pDst = 0;

		// Obter os bits da mensagem inicial e posiciona-los corretamente
		*pDst |= (*p & 0x00007800) << 5;
		*pDst |= (*p & 0x000007F0) << 4;
		*pDst |= (*p & 0x0000000E) << 3;
		*pDst |= (*p & 0x00000001) << 2;

		 p15 = countSetBits(*p & 0x00007800) & 1;	// check if p15 is 0 or 1
		 p7  = countSetBits(*p & 0x000007F0) & 1;	// check if p7 is 0 or 1
		 p3  = countSetBits(*p & 0x0000478E) & 1;	// check if p3 is 0 or 1
		 p1  = countSetBits(*p & 0x0000366D) & 1;	// check if p1 is 0 or 1
		 p0  = countSetBits(*p & 0x00002D5B) & 1;	// check if p0 is 0 or 1

		 *pDst |= p15 << 15;
		 *pDst |= p7 << 7;
		 *pDst |= p3 << 3;
		 *pDst |= p1 << 1;
		 *pDst |= p0 << 0;
	}
}

void EncoderHammingCodeHw(int* pDst, int* pSrc, unsigned int size)
{
	int* p;

	for (p = pSrc; p < pSrc + size; p++, pDst++)
	{
		//macros: *p - o valor a passar, 0 - o n mero da interface, FSL_DEFAULT - flags (by default)
		putfslx(*p, 0, FSL_DEFAULT);
		getfslx(*pDst, 0, FSL_DEFAULT);
	}
}

bool CheckEncoderHammingCode(int* pData1, int* pData2, unsigned int size)
{
	int* p;
	int *pDst;
	int p15, p7, p3, p1, p0;

	for (p = pData1; p < pData1 + size; p++, pData2++)
	{
		*pDst = 0;
		*pDst |= (*p & 0x00007800) << 5;
		*pDst |= (*p & 0x000007F0) << 4;
		*pDst |= (*p & 0x0000000E) << 3;
		*pDst |= (*p & 0x00000001) << 2;

		 p15 = countSetBits(*p & 0x00007800) & 1;	// check if p15 is 0 or 1
		 p7  = countSetBits(*p & 0x000007F0) & 1;	// check if p7 is 0 or 1
		 p3  = countSetBits(*p & 0x0000478E) & 1;	// check if p3 is 0 or 1
		 p1  = countSetBits(*p & 0x0000366D) & 1;	// check if p1 is 0 or 1
		 p0  = countSetBits(*p & 0x00002D5B) & 1;	// check if p0 is 0 or 1

		 *pDst |= p15 << 15;
		 *pDst |= p7 << 7;
		 *pDst |= p3 << 3;
		 *pDst |= p1 << 1;
		 *pDst |= p0 << 0;

		if (*pData2 != *pDst)
		{
			return FALSE;
		}
	}

	return TRUE;
}

/************************** Decoder Hamming Code ****************************/

/**
 * 	@param pDst  1-bit valid and 15-bit decoded messages
 * 	@param pSrc  20-bit encoded messages
 * 	@size
 */
void DecoderHammingCodeSW(int* pDst, int* pSrc, unsigned int size)
{
	int* p;
	int c;	// checker bit generator
	int overallParity;
	int decMsg;	// decoded message;

		for (p = pSrc; p < pSrc + size; p++, pDst++)
		{
			*pDst = 0;
			c = 0;
			decMsg = 0;

			decMsg |= ((*p >> 16) & 0b1111) << 11;
			decMsg |= ((*p >> 8 ) & 0b1111111) << 4;
			decMsg |= ((*p >> 4 ) & 0b111) << 1;
			decMsg |= ((*p >> 2 ) & 0b1) << 0;

			c = ((countSetBits(*p & 0x000F8000) & 1) << 4 ) |
				((countSetBits(*p & 0x00007F80) & 1) << 3)  |
				((countSetBits(*p & 0x00087878) & 1) << 2)  |
				((countSetBits(*p & 0x00066666) & 1) << 1)  |
				(countSetBits(*p & 0x00055555) & 1) ;

			overallParity = (countSetBits(*p) & 1);

			if (c == 0)
			{
				*pDst = decMsg;	// 00
			}else{
				if (overallParity == 1)
				{
					decMsg = correctionError(c, decMsg);
					*pDst =  ((1 << 15) | decMsg);	// 01
				}else // overallParity = 0
				{
					*pDst = ((2 << 15) | decMsg);	// 10
				}
			}
		}

}

void DecoderHammingCodeHw(int* pDst, int* pSrc, unsigned int size)
{
	int* p;

	for (p = pSrc; p < pSrc + size; p++, pDst++)
	{
		//macros: *p - o valor a passar, 0 - o n mero da interface, FSL_DEFAULT - flags (by default)
		putfslx(*p, 1, FSL_DEFAULT);
		getfslx(*pDst, 1, FSL_DEFAULT);
	}
}

bool CheckDecoderHammingCode(int* pData1, int* pData2, unsigned int size)
{
	int* p;
	int *pDst;
	int c;	// checker bit generator
	int overallParity;
	int decMsg;	// decoded message;


	for (p = pData1; p < pData1 + size; p++, pData2++)
	{
		decMsg = 0;

		decMsg |= ((*p >> 16) & 0b1111) << 11;
		decMsg |= ((*p >> 8 ) & 0b1111111) << 4;
		decMsg |= ((*p >> 4 ) & 0b111) << 1;
		decMsg |= ((*p >> 2 ) & 0b1) << 0;

		c = ((countSetBits(*p & 0x000F8000) & 1) << 4 ) |
			((countSetBits(*p & 0x00007F80) & 1) << 3)  |
			((countSetBits(*p & 0x00087878) & 1) << 2)  |
			((countSetBits(*p & 0x00066666) & 1) << 1)  |
			(countSetBits(*p & 0x00055555) & 1) ;

		overallParity = (countSetBits(*p) & 1);

		if (c == 0)
		{
			*pDst = decMsg;	// 00
		}else{
			if (overallParity == 1)
			{
				decMsg = correctionError(c, decMsg);
				*pDst =  ((1 << 15) | decMsg);	// 01
			}else // overallParity = 0
			{
				*pDst = ((2 << 15) | decMsg);	// 10
			}
		}

		if (*pData2 != *pDst)
		{
			return FALSE;
		}
	}

	return TRUE;
}

void PrintDataArray(int* pData, unsigned int size)
{
	int* p;

	xil_printf("\n\r");
	for (p = pData; p < pData + size; p++)
	{
		xil_printf("%08x  ", *p);
		//xil_printf("%d  ", *p);
	}
}

void ResetPerformanceTimer()
{
	// Disable a timer counter such that it stops running (base address of the device, the specific timer counter within the device)
	XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR, 0);
	/*
	 * Set the value that is loaded into the timer counter and cause it to
	 * be loaded into the timer counter
	 */
//	Set the Load Register of a timer counter to the specified value.
//	(the base address of the device, specific timer counter within the device, 32 bit value to be written to the register)
	XTmrCtr_SetLoadReg(XPAR_TMRCTR_0_BASEADDR, 0, 0);
//	Cause the timer counter to load it's Timer Counter Register with the value in the Load Register.
//	(the base address of the device, the specific timer counter within the device)
	XTmrCtr_LoadTimerCounterReg(XPAR_TMRCTR_0_BASEADDR, 0);
//	Set the Control Status Register of a timer counter to the specified value.
//	(base address of the device, specific timer counter within the device, 32 bit value to be written to the register)
	XTmrCtr_SetControlStatusReg(XPAR_TMRCTR_0_BASEADDR, 0, 0x00000000);
}

void RestartPerformanceTimer()
{
	ResetPerformanceTimer();
	XTmrCtr_Enable(XPAR_TMRCTR_0_BASEADDR, 0);
}

unsigned int GetPerformanceTimer()
{
	return XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR, 0);
}

unsigned int StopAndGetPerformanceTimer()
{
	XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR, 0);
	return GetPerformanceTimer();
}

int main()
{
	int srcData[N], dstData[N];
	unsigned int timeElapsed;

    init_platform();

    xil_printf("\n\rSoftware Only vs. Hardware Assisted Encoder Hamming Code \n\r");

    RestartPerformanceTimer();
    srand(0);
    for (int i = 0; i < N; i++)
    {
    	srcData[i] = rand()	% 32768;	// // Generate a random number between 0 and 32767 (15 bits)
    }
    timeElapsed = StopAndGetPerformanceTimer();
    xil_printf("\n\rArray initialization time: %d microseconds\n\r",
    		   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000)); // each period is 10 ns = 0.01 us
    PrintDataArray(srcData, min(8, N));
    xil_printf("\n\r");

    // Software only
	RestartPerformanceTimer();
	EncoderHammingCodeSW(dstData, srcData, N);
	timeElapsed = StopAndGetPerformanceTimer();
	xil_printf("\n\rSoftware only encoder hamming code time: %d microseconds",
			   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
	PrintDataArray(dstData, min(8, N));
	xil_printf("\n\rChecking result: %s\n\r",
			CheckEncoderHammingCode(srcData, dstData, N) ? "OK" : "Error");

	// Hardware assisted
    RestartPerformanceTimer();
    EncoderHammingCodeHw(dstData, srcData, N);
    timeElapsed = StopAndGetPerformanceTimer();
    xil_printf("\n\rHardware assisted encoder hamming code time: %d microseconds",
    		   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
    PrintDataArray(dstData, min(8, N));
	xil_printf("\n\rChecking result: %s\n\r",
			CheckEncoderHammingCode(srcData, dstData, N) ? "OK" : "Error");


	xil_printf("-------------------------------------------------------------------------");

	xil_printf("\n\rSoftware Only vs. Hardware Assisted Decoder Hamming Code \n\r");

	// 11101100001001100110 - valido	-- mensagem = 0000742D
	// 10101100001001100110 - 1 erro    -- mensagem = 01 111010000101101
	// 10101100001001100010 - 2 erros   -- mensagem = 10 101010000101100
    //int testData[3] = {967270 , 705126 , 705122};
    int finalData[N];

	// Software only
	RestartPerformanceTimer();
	DecoderHammingCodeSW(finalData, dstData, N);
	timeElapsed = StopAndGetPerformanceTimer();
	xil_printf("\n\rSoftware only decoder hamming code time: %d microseconds",
			   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
	PrintDataArray(finalData, min(8, N));
	xil_printf("\n\rChecking result: %s\n\r",
			CheckDecoderHammingCode(dstData, finalData, N) ? "OK" : "Error");

	// Hardware assisted
	RestartPerformanceTimer();
	DecoderHammingCodeHw(finalData, dstData, N);
	timeElapsed = StopAndGetPerformanceTimer();
	xil_printf("\n\rHardware assisted decoder hamming code time: %d microseconds",
			   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
	PrintDataArray(finalData, min(8, N));
	xil_printf("\n\rChecking result: %s\n\r",
			CheckDecoderHammingCode(dstData, finalData, N) ? "OK" : "Error");


    cleanup_platform();
    return 0;
}
